import pandas as pd
from scipy.optimize import curve_fit
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import tkinter
from tkinter import HORIZONTAL
from tkinter import messagebox

def clean(dataset):
    cols_num = [(col, i) for col in dataset.columns 
                for i in dataset.loc[:,col] 
                if  (type(i) == float or type(i) == int) and str(i) != 'nan']
    
    data = [i[1] for i in cols_num]
    data.sort()
    print(data)

    return data

def freq(dataset):

    frequence = [ dataset.count(dataset[i])/len(dataset) for i in range(len(dataset))]
    
    print("frequences d'apparition")
    print(frequence)

    return frequence

def graph(dataset, bin):

    clean_data = clean(dataset)
    frequence = freq(clean_data)
    
    """curve_fit(freq, clean_data, frequence)#J'obtiens une erreur du type ValueError: Unable to determine number of fit parameters.

    print(freq(clean_data))"""

    fig, ax = plt.subplots()
    occ, edges, _ = ax.hist(clean_data, bins=len(clean_data)//bin, color='khaki', edgecolor='black', density=True)
    midpoints = 0.5*(edges[1:]+edges[:-1])
    ax.plot(midpoints, occ, color='grey', linewidth=2)
    
    fig.set_figwidth(10)
    y = [0] + frequence
    ax.set_yticks(y)
    ax.set_xlabel('Nombre de désintégrations')
    ax.set_ylabel('Fréquence')
    ax.set_title('Répartion des nombres de desintégrations')

    dis = FigureCanvasTkAgg(fig, win)
    dis.get_tk_widget().place(x=20, y=200)


#collecter les valeurs entrées
def collect_entry(*args):
    global path
    path = var_entry.get()
    try:
        dataset = pd.read_excel(path)
    except:
        messagebox.showwarning('File not Found','No such file or directory')
        var_entry.set('')
    else:
        try:
            bins = spin_entry.get()
            if spin_entry.get() > 100:
                raise ValueError
        except:
            messagebox.showwarning('Wrong value',' Enter an integer between 1 and 100 please')
            spin_entry.set(1)
        else:
            graph(dataset, bins)

#programme principale
#paramétrage fenêtre
win = tkinter.Tk()
win.geometry('1040x800')
win.resizable(width=False, height=False)
win.title('Exploitation des données de la classe')

path = str()
#message
label1 = tkinter.Label(text='Entrer le chemin du fichier contenant les données', font=('Ariel', 13))
label1.place(x=30, y=10)

label2 = tkinter.Label(text="Quel intervalle contient une barre de l'historgramme ?", font=('Ariel', 13))
label2.place(x=580, y=10)

#barre saisie  
var_entry = tkinter.StringVar()
entry = tkinter.Entry(win, textvariable=var_entry ,width=50)
entry.place(x=55, y=40)

spin_entry = tkinter.IntVar()
spin = tkinter.Spinbox(win, textvariable=spin_entry, from_=1, to_=100, width=50)
spin.place(x=615, y=40)

#bouton
button = tkinter.Button(win, text='Effectuer la modélisation', width=80, height=5, command=collect_entry)
button.place(x=230, y=90)

#affichage

#messagebox.showwarning('About', 'This programm looks after all the numeric data, so take care about what you are putting in your xlsx file')
""" ^   ^   ^   ^   ^   ^   ^   ^   ^   ^   ^   ^   ^
    |   |   |   |   |   |   |   |   |   |   |   |   |
La ligne qui est censée afficher le message d'alerte """
win.mainloop()